import { jsx as _jsx, jsxs as _jsxs } from "frog/jsx/jsx-runtime";
import { checkCircledIcon, crossCircledIcon } from './icons.js';
export function Data() {
    return (_jsxs("div", { role: "grid", "aria-colcount": "16", class: "bg-background-100 border rounded-md overflow-hidden", style: { height: 'min-content' }, "x-data": "{\n        get validations() {\n          const imageSize = data.metrics.imageSize\n          const limits = {\n            postUrl: 256,\n            inputText: 32,\n            state: 4_096,\n            image: 256,\n          }\n          const postUrlTooLong = frame.postUrl.length > limits.postUrl\n          const inputTextTooLong = frame.input?.text\n            ? frame.input.text.length > limits.inputText\n            : false\n          const stateTooLong = frame.state.length > limits.state\n          const imageTooLarge = imageSize ? imageSize / 1024 > limits.image : false\n\n          let hasState\n          if (!frame.state) hasState = false\n          else\n            try {\n              const decoded = decodeURIComponent(frame.state)\n              const parsed = JSON.parse(decoded)\n              hasState = Boolean(parsed.previousState)\n            } catch {\n              hasState = false\n            }\n\n          return [\n            {\n              property: 'fc:frame',\n              value: frame.version,\n              status: frame.version === 'vNext' ? 'valid' : 'invalid',\n              message: `Version is ${frame.version} and must be vNext.`,\n            },\n            {\n              property: 'fc:frame:image',\n              value: frame.imageUrl,\n              status: imageTooLarge ? 'invalid' : 'valid',\n              message: `Image is ${((imageSize ?? 1024) / 1024).toFixed(\n                2,\n              )} kilobytes and must be ${limits.image.toLocaleString()} kilobytes or less.`,\n            },\n            {\n              property: 'fc:frame:aspect_ratio',\n              value: frame.imageAspectRatio,\n              status: 'valid',\n            },\n            {\n              property: 'fc:frame:post_url',\n              value: frame.postUrl,\n              status: postUrlTooLong ? 'invalid' : 'valid',\n              message: `Post URL is ${\n                frame.postUrl.length\n              } bytes and must be ${limits.postUrl.toLocaleString()} bytes or less.`,\n            },\n            ...(hasState\n              ? [\n                  {\n                    property: 'fc:frame:state',\n                    value: frame.state,\n                    status: stateTooLong ? 'invalid' : 'valid',\n                    message: `State is ${\n                      frame.state.length\n                    } bytes and must be ${limits.state.toLocaleString()} bytes or less.`,\n                  },\n                ]\n              : []),\n            {\n              property: 'og:image',\n              value: frame.image,\n              status: 'valid',\n            },\n            ...(frame.input?.text\n              ? [\n                  {\n                    property: 'fc:frame:input:text',\n                    value: frame.input.text,\n                    status: inputTextTooLong ? 'invalid' : 'valid',\n                    message: `Input text is ${\n                      frame.input.text.length\n                    } bytes and must be ${limits.inputText.toLocaleString()} bytes or less. Keep in mind non-ASCII characters, like emoji, can take up more than 1 byte of space.`,\n                  },\n                ]\n              : []),\n            ...(frame.buttons.map((button) => ({\n                property: `fc:frame:button:${button.index}`,\n                value: `${button.title}${button.type !== 'post' ? `, ${button.type}` : ''}${\n                  button.target ? `, ${button.target}` : ''\n                }`,\n                status: 'valid',\n              }))),\n          ]\n        },\n      }", children: [_jsx("div", { class: "sr-only", role: "rowgroup", children: _jsxs("div", { role: "row", children: [_jsx("span", { role: "columnheader", "aria-colindex": "1", children: "Property" }), _jsx("span", { role: "columnheader", "aria-colindex": "2", children: "Value" }), _jsx("span", { role: "columnheader", "aria-colindex": "3", children: "Status" })] }) }), _jsx("div", { role: "rowgroup", class: "overflow-hidden divide-y", children: _jsx("template", { "x-for": "(row, index) in validations", children: _jsxs("div", { role: "row", class: "flex flex-col", children: [_jsxs("div", { class: "items-center flex flex-row", style: { fontSize: '0.8125rem' }, children: [_jsx("div", { class: "text-gray-700 p-3 font-medium", "x-text": "row.property", style: { minWidth: '10rem' }, role: "gridcell", "aria-colindex": "1" }), _jsx("div", { role: "gridcell", "aria-colindex": "2", class: "bg-transparent text-gray-1000 p-3 text-ellipsis overflow-hidden whitespace-nowrap font-mono text-xs", "x-text": "row.value" }), _jsxs("div", { role: "gridcell", "aria-colindex": "3", class: "flex p-3 gap-3", style: {
                                            justifyContent: 'flex-end',
                                            flex: '1',
                                            marginBottom: '2px',
                                        }, children: [_jsx("span", { class: "sr-only", "x-text": "row.status" }), _jsx("template", { "x-if": "row.status === 'valid'", children: _jsx("span", { class: "text-green-900", children: checkCircledIcon }) }), _jsx("template", { "x-if": "row.status === 'invalid'", children: _jsx("span", { class: "text-red-900", children: crossCircledIcon }) })] })] }), _jsx("template", { "x-if": "row.status === 'invalid' && row.message", children: _jsx("div", { class: "p-3", style: { paddingTop: '0', paddingLeft: '10.75rem' }, children: _jsx("div", { class: "text-red-900 text-xs rounded-lg leading-snug font-mono", children: _jsx("span", { style: { textWrap: 'balance' }, "x-html": "row.message" }) }) }) })] }) }) })] }));
}
//# sourceMappingURL=Data.js.map