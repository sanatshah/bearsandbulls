import { jsx as _jsx, jsxs as _jsxs } from "frog/jsx/jsx-runtime";
import { checkIcon, copyIcon } from './icons.js';
export function Tabs() {
    const indicatorStyle = {
        display: 'none',
        height: '2px',
        bottom: '0',
        left: '0.75rem',
        right: '0.75rem',
    };
    const rowClass = 'flex flex-row py-3 justify-between';
    const labelClass = 'text-gray-700 font-medium min-w-36';
    const valueClass = 'text-gray-1000 font-mono line-clamp-2 text-right';
    return (_jsxs("div", { class: "border rounded-md bg-background-100", "x-data": "{\n        get state() {\n          if (data.context.status === 'initial' && data.context.previousState)\n            return data.context.previousState\n          return frame.debug.state\n        },\n      }", children: [_jsxs("ul", { role: "tablist", class: "bg-background-200 border rounded-t-md flex flex-row text-sm", style: {
                    borderLeft: '0',
                    borderRight: '0',
                    borderTop: '0',
                    gap: '2px',
                    paddingTop: '1px',
                    paddingLeft: '0.25rem',
                    paddingRight: '0.25rem',
                }, children: [_jsx("li", { role: "presentation", children: _jsxs("button", { role: "tab", type: "button", id: "request", class: "bg-transparent relative py-3 border-gray-1000 px-3", "x-on:click": "tab = 'request'", ':aria-selected': 'tab === "request"',
                            ':class': `{
                  'text-gray-700': tab !== 'request',
                  'text-gray-1000': tab === 'request',
                }`, children: ["Request", _jsx("div", { "aria-hidden": "true", class: "absolute bg-gray-1000", style: indicatorStyle, ':style': `tab === 'request' && {
                    display: 'block',
                  }` })] }) }), _jsx("li", { role: "presentation", children: _jsxs("button", { role: "tab", type: "button", id: "context", class: "relative bg-transparent py-3 border-gray-1000 px-3", "x-on:click": "tab = 'context'", ':aria-selected': 'tab === "context"',
                            ':class': `{
                  'text-gray-700': tab !== 'context',
                  'text-gray-1000': tab === 'context',
                }`, children: ["Context", _jsx("div", { "aria-hidden": "true", class: "absolute bg-gray-1000", style: indicatorStyle, ':style': `tab === 'context' && {
                    display: 'block',
                  }` })] }) }), _jsx("li", { role: "presentation", "x-show": "state", children: _jsxs("button", { role: "tab", type: "button", id: "state", class: "relative bg-transparent py-3 border-gray-1000 px-3", "x-on:click": "tab = 'state'", ':aria-selected': 'tab === "state"',
                            ':class': `{
                  'text-gray-700': tab !== 'state',
                  'text-gray-1000': tab === 'state',
                }`, children: ["State", _jsx("div", { "aria-hidden": "true", class: "absolute bg-gray-1000", style: indicatorStyle, ':style': `tab === 'state' && {
                    display: 'block',
                  }` })] }) }), _jsx("li", { role: "presentation", children: _jsxs("button", { role: "tab", type: "button", id: "meta-tags", class: "relative bg-transparent py-3 border-gray-1000 px-3", "x-on:click": "tab = 'meta-tags'", ':aria-selected': 'tab === "meta-tags"',
                            ':class': `{
                  'text-gray-700': tab !== 'meta-tags',
                  'text-gray-1000': tab === 'meta-tags',
                }`, children: ["Meta Tags", _jsx("div", { "aria-hidden": "true", class: "absolute bg-gray-1000", style: indicatorStyle, ':style': `tab === 'meta-tags' && {
                    display: 'block',
                  }` })] }) })] }), _jsxs("section", { id: "request-section", role: "tabpanel", "aria-labelledby": "request", class: "scrollbars flex flex-col lg:flex-row divide-y lg:divide-x lg:divide-y-0", "x-data": "{\n            get body() { return data.body },\n            get url() {\n              if (data.body) return data.body.url\n              return data.url\n            },\n          }", "x-show": "tab === 'request'", style: { fontSize: '0.8125rem' }, children: [_jsxs("div", { class: "flex flex-col px-4 py-2 lg:w-1/2 divide-y", children: [_jsxs("div", { class: rowClass, children: [_jsx("div", { class: labelClass, children: "Method" }), _jsx("div", { class: "flex items-center border px-1 py-0.5 leading-4 rounded-sm text-gray-900 font-mono uppercase", "x-text": "data.method" })] }), _jsxs("div", { class: rowClass, children: [_jsx("div", { class: labelClass, children: "Time" }), _jsx("div", { class: valueClass, "x-text": "new Date(data.timestamp).toLocaleString()" })] }), _jsxs("div", { class: rowClass, children: [_jsx("div", { class: labelClass, children: "Host" }), _jsx("div", { class: valueClass, "x-text": "new URL(url).host" })] }), _jsxs("div", { class: rowClass, children: [_jsx("div", { class: labelClass, children: "Request Path" }), _jsx("div", { class: valueClass, "x-text": "new URL(url).pathname" })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "body?.fid", children: [_jsx("div", { class: labelClass, children: "User FID" }), _jsx("div", { class: valueClass, "x-text": "`#${body?.fid}`" })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "body?.inputText", children: [_jsx("div", { class: labelClass, children: "Input Text" }), _jsx("div", { class: valueClass, "x-text": "body?.inputText" })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "body?.buttonIndex", children: [_jsx("div", { class: labelClass, children: "Button Index" }), _jsx("div", { class: valueClass, "x-text": "body?.buttonIndex" })] })] }), _jsxs("div", { class: "flex flex-col px-4 py-2 lg:w-1/2 divide-y", children: [_jsxs("div", { class: rowClass, children: [_jsx("div", { class: labelClass, children: "Status Code" }), _jsxs("div", { class: "flex flex-row gap-2 items-center font-mono", ':class': `{
                    'text-green-900': data.response.success,
                    'text-red-900': !data.response.success,
                  }`, children: [_jsx("div", { class: "flex items-center border px-1 py-0.5 leading-4 rounded-sm uppercase", "x-text": "data.response.status", ':class': `{
                      'border-green-100': data.response.success,
                      'border-red-100': !data.response.success,
                    }` }), _jsx("div", { "x-text": "data.response.statusText" })] })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "data.context.verified !== undefined", children: [_jsx("div", { class: labelClass, children: "Verified" }), _jsx("div", { class: valueClass, "x-text": "data.context.verified" })] }), _jsxs("div", { class: rowClass, "x-show": "data.metrics.speed", children: [_jsx("div", { class: labelClass, children: "Response Time" }), _jsx("div", { class: valueClass, "x-text": "formatSpeed(data.metrics.speed)" })] }), _jsxs("div", { class: rowClass, "x-show": "data.metrics.htmlSize", children: [_jsx("div", { class: labelClass, children: "Frame Size" }), _jsx("div", { class: valueClass, "x-text": "formatFileSize(data.metrics.htmlSize)" })] }), _jsxs("div", { class: rowClass, "x-show": "data.metrics.imageSize", children: [_jsx("div", { class: labelClass, children: "Image Size" }), _jsx("div", { class: valueClass, "x-text": "formatFileSize(data.metrics.imageSize)" })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "data.response.location", children: [_jsx("div", { class: labelClass, children: "Location" }), _jsx("div", { class: valueClass, "x-text": "data.response.location" })] }), _jsxs("div", { class: rowClass, "x-cloak": true, "x-show": "data.response.error", children: [_jsx("div", { class: labelClass, children: "Error" }), _jsx("div", { class: valueClass, "x-text": "data.response.error" })] })] })] }), _jsx("section", { id: "context-section", role: "tabpanel", "aria-labelledby": "context", class: "p-4 scrollbars", "x-show": "tab === 'context'", style: { fontSize: '0.8125rem' }, children: _jsx("div", { "x-html": "getCodeHtml(JSON.stringify(data.context ?? {}, null, 2), 'json')" }) }), _jsx("section", { id: "state-section", role: "tabpanel", "aria-labelledby": "state", "x-data": "{\n          async init() {\n            const stringifiedState = JSON.stringify(this.state ?? {}, null, 2)\n            const stringifiedPreviousState = JSON.stringify(this.previousState ?? {}, null, 2)\n            const [stateHtml, previousStateHtml] = await Promise.all([\n              getCodeHtml(stringifiedState, 'json'),\n              getCodeHtml(stringifiedPreviousState, 'json')\n            ])\n            this.stateHtml = stateHtml\n            this.previousStateHtml = previousStateHtml\n\n            $watch('state', async (value) => {\n              const stringified = JSON.stringify(value ?? {}, null, 2)\n              const html = await getCodeHtml(stringified, 'json')\n              this.stateHtml = html\n            })\n            $watch('previousState', async (value) => {\n              const stringified = JSON.stringify(value ?? {}, null, 2)\n              const html = await getCodeHtml(stringified, 'json')\n              this.previousStateHtml = html\n            })\n          },\n          get previousState() {\n            const previousKey = stack[stackIndex - 1]\n            if (!previousKey) return\n\n            const previousData = dataMap[previousKey]\n            const previousContext = previousData.context\n            if (previousContext.status === 'initial' && previousContext.previousState)\n              return previousContext.previousState\n\n            return previousData.frame.debug.state\n          },\n          stateHtml: undefined,\n          previousStateHtml: undefined,\n        }", "x-show": "tab === 'state'", children: _jsx("template", { "x-if": "state", children: _jsxs("div", { class: "scrollbars flex flex-col lg:flex-row divide-y lg:divide-x lg:divide-y-0", style: { fontSize: '0.8125rem' }, children: [_jsxs("div", { class: "flex flex-col lg:w-1/2 p-4 gap-2 scrollbars", children: [_jsx("div", { class: "font-medium text-xs text-gray-700 uppercase", children: "Current" }), _jsx("div", { "x-html": "stateHtml ?? `<pre class='text-gray-500'>${JSON.stringify(state ?? {}, null, 2)}</pre>`" })] }), _jsxs("div", { class: "flex flex-col lg:w-1/2 p-4 gap-2 scrollbars", children: [_jsx("div", { class: "font-medium text-xs text-gray-700 uppercase", children: "Previous" }), _jsx("div", { "x-html": "previousStateHtml ?? `<pre class='text-gray-500'>${JSON.stringify(previousState ?? {}, null, 2)}</pre>`" })] })] }) }) }), _jsxs("section", { id: "meta-tags-section", role: "tabpanel", "aria-labelledby": "meta-tags", class: "relative", "x-show": "tab === 'meta-tags'", style: { fontSize: '0.8125rem' }, "x-data": "{\n          copied: false,\n          get metaTags() {\n            let html = ''\n            for (const tag of frame.debug.htmlTags) {\n              let text = tag\n              if (text.includes('_frog_fc:frame:image')) text = text.replace('_frog_fc:frame:image', frame.imageUrl)\n              else if (text.includes('_frog_fc:frame:state')) text = text.replace('_frog_fc:frame:state', frame.state)\n              else if (text.includes('_frog_og:image')) text = text.replace('_frog_og:image', frame.image)\n              html += text + '\\n'\n            }\n            return html\n          }\n        }", children: [_jsxs("div", { class: "items-center absolute", style: { right: '0.5rem', top: '0.5rem' }, children: [_jsx("button", { "aria-label": "copy", type: "button", class: "text-gray-600 bg-transparent p-1.5 rounded-sm hover:bg-gray-100", "x-show": "!copied", "x-on:click": "\n              if (copied) return\n              navigator.clipboard.writeText(metaTags)\n              copied = true\n              setTimeout(() => copied = false, 1_000)\n            ", children: copyIcon }), _jsx("div", { class: "text-green-900 bg-green-100 p-1.5 rounded-sm", "x-show": "copied", children: checkIcon })] }), _jsx("div", { class: "p-4 scrollbars", children: _jsx("div", { "x-html": "getCodeHtml(metaTags, 'html')" }) })] })] }));
}
//# sourceMappingURL=Tabs.js.map