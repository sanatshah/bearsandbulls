import { jsx as _jsx, jsxs as _jsxs } from "frog/jsx/jsx-runtime";
import { chevronDownIcon, chevronUpIcon, circleBackslashIcon, idCardIcon, pencil2Icon, resetIcon, } from './icons.js';
export function Timeline() {
    const buttonClass = 'border rounded-sm bg-background-200 p-1.5 text-gray-700 hover:bg-gray-100';
    return (_jsxs("div", { class: "h-timeline flex flex-col justify-between", "x-data": "{\n        previousLog() {\n          const nextLogIndex = logIndex + 1 > logs.length - 1 ? 0 : logIndex + 1\n          const key = logs[nextLogIndex]\n          dataKey = key\n          logIndex = nextLogIndex\n\n          const element = document.querySelector(`#log-${nextLogIndex}`)\n          element.scrollIntoView({ block: 'nearest' })\n        },\n        nextLog() {\n          let nextLogIndex = logIndex - 1 >= 0 ? logIndex - 1 : logs.length - 1\n          if (logIndex === -1 && logs.length > 1) nextLogIndex = logs.length - 2\n\n          const key = logs[nextLogIndex]\n          dataKey = key\n          logIndex = nextLogIndex\n\n          const element = document.querySelector(`#log-${nextLogIndex}`)\n          element.scrollIntoView({ block: 'nearest' })\n        },\n      }", children: [_jsx("div", { class: "border rounded-t-md overflow-hidden flex flex-col h-full", children: _jsx("div", { "x-ref": "container", class: "scrollbars", children: _jsx("div", { class: "bg-background-100 w-full flex", style: {
                            flexDirection: 'column-reverse',
                            justifyContent: 'flex-end',
                        }, children: _jsx("template", { "x-for": "(key, index) in logs", children: _jsxs("button", { type: "button", class: "flex flex-col gap-2 p-4 w-full border-gray-200 hover:bg-gray-100", ':id': '`log-${index}`',
                                ':class': 'index === logIndex ? "bg-gray-100" : "bg-transparent"',
                                ':style': '(index !== 0 || logs.length < 6) && { borderBottomWidth: `1px` }',
                                ':tabIndex': 'logs.length - index', "x-data": "{\n                get log() { return dataMap[key] },\n              }", "x-on:click": `
                dataKey = key
                logIndex = index
              `, children: [_jsxs("div", { class: "flex flex-row items-center justify-between w-full", children: [_jsxs("div", { class: "flex gap-1.5 font-mono text-gray-700 text-xs items-center", children: [_jsx("div", { class: "flex items-center border px-1 py-0.5 leading-4 rounded-sm text-gray-900 uppercase", "x-text": "log.method" }), _jsx("div", { class: "flex items-center border px-1 py-0.5 leading-4 rounded-sm uppercase", "x-text": "log.response.status", ':class': `{
                        'border-green-100': log.response.success,
                        'text-green-900': log.response.success,
                        'border-red-100': !log.response.success,
                        'text-red-900': !log.response.success,
                      }` }), _jsx("span", { "x-text": "formatSpeed(log.metrics.speed)" })] }), _jsx("div", { class: "font-mono text-gray-700 text-xs", "x-text": "formatTime(log.timestamp)" })] }), _jsx("div", { class: "flex gap-1.5 font-mono text-gray-900 text-xs", children: _jsx("span", { "x-text": "formatUrl(log.body ? log.body.url : log.url)" }) })] }) }) }) }) }), _jsxs("div", { class: "bg-background-100 px-2 py-2 flex justify-between border rounded-b-md border-t-0", children: [_jsxs("div", { class: "flex gap-1.5", children: [_jsxs("div", { class: "flex border rounded-sm bg-background-200 text-gray-700 divide-x", children: [_jsx("button", { class: "bg-transparent p-1.5 hover:bg-gray-100 rounded-l-sm", type: "button", "x-on:click": "previousLog", children: chevronUpIcon }), _jsx("button", { class: "bg-transparent p-1.5 hover:bg-gray-100 rounded-r-sm", type: "button", "x-on:click": "nextLog", children: chevronDownIcon })] }), _jsx("button", { class: buttonClass, type: "button", "x-on:click": "\n              const log = logs.at(-1)\n              dataKey = log\n              logs = [log]\n              logIndex = -1\n            ", children: circleBackslashIcon })] }), _jsxs("div", { "x-data": "{ open: false }", class: "relative", children: [_jsx("button", { class: buttonClass, type: "button", "x-on:click": "open = !open", "x-ref": "button", children: idCardIcon }), _jsxs("form", { "x-cloak": true, "x-show": "open", class: "border bg-background-100 rounded-lg w-full overflow-hidden px-4 pb-4 pt-3 flex flex-col gap-3 absolute", style: {
                                    marginBottom: '4px',
                                    bottom: '100%',
                                    right: '0',
                                    width: '230px',
                                    zIndex: '10',
                                }, '@click.outside': 'close',
                                '@keyup.escape': 'close',
                                '@submit.prevent': 'submit',
                                'x-trap': 'open', "x-effect": "\n              if (open) {\n                userFid = overrides.userFid\n                castFid = overrides.castFid\n                castHash = overrides.castHash\n              }\n            ", "x-data": "{\n              userFid: overrides.userFid,\n              castFid: overrides.castFid,\n              castHash: overrides.castHash,\n              overrideUserFid: Boolean(user) && overrides.userFid !== user.userFid,\n\n              close() {\n                this.overrideUserFid = Boolean(user) && overrides.userFid !== user.userFid\n                open = false\n              },\n              async submit() {\n                overrides = {\n                  userFid: parseInt(this.userFid, 10),\n                  castFid: parseInt(this.castFid, 10),\n                  castHash: this.castHash,\n                }\n\n                const nextStackId = logs[logIndex] ?? dataKey\n                const nextData = dataMap[dataKey]\n                if (!nextData || nextData?.type === 'initial') {\n                  open = false\n                  return\n                }\n\n                const body = {\n                  ...nextData.body,\n                  castId: {\n                    fid: overrides.castFid,\n                    hash: overrides.castHash,\n                  },\n                  fid: overrides.userFid !== user?.userFid ? overrides.userFid : user.userFid,\n                }\n\n                let json\n                switch (nextData.type) {\n                  case 'action': {\n                    json = await postFrameAction(body)\n                    break\n                  }\n                  case 'redirect': {\n                    json = await postFrameRedirect(body)\n                    break\n                  }\n                }\n\n                dataKey = json.id\n                inputText = ''\n\n                open = false\n              },\n            }", children: [_jsxs("div", { class: "flex flex-col gap-0.5", children: [_jsx("div", { class: "text-xs text-gray-700 font-medium", style: { paddingLeft: '0.25rem' }, children: "User" }), _jsxs("div", { class: "relative flex items-center", children: [_jsx("input", { "aria-label": "User FID", autocomplete: "off", class: "bg-background-200 rounded-md border px-3 py-2 text-sm leading-snug w-full text-xs", name: "userFid", type: "text", required: true, pattern: "^[0-9]*$", placeholder: "FID", "x-model": "userFid", "x-ref": "userFid", "data-1p-ignore": true, ':disabled': 'Boolean(user) && overrideUserFid === false' }), _jsx("button", { "aria-label": "Edit User FID", "x-show": "!overrideUserFid && user?.userFid === parseInt(userFid, 10)", class: "absolute text-xs bg-transparent text-gray-700 font-medium hover:bg-gray-100 p-1 rounded-sm", type: "button", style: { right: '0.25rem' }, "x-on:click": "\n                    overrideUserFid = true\n                    $nextTick(() => $refs.userFid.focus())\n                  ", children: pencil2Icon }), _jsx("button", { "aria-label": "Restore User FID", "x-show": "user && overrideUserFid", class: "absolute text-xs bg-transparent text-gray-700 font-medium hover:bg-gray-100 p-1 rounded-sm", type: "button", style: { right: '0.25rem' }, "x-on:click": "\n                    userFid = user.userFid\n                    overrideUserFid = false\n                  ", children: resetIcon })] })] }), _jsxs("div", { class: "flex flex-col gap-0.5", children: [_jsx("div", { class: "text-xs text-gray-700 font-medium", style: { paddingLeft: '0.25rem' }, children: "Cast" }), _jsxs("div", { class: "bg-background-200 border rounded-md divide-y", children: [_jsx("input", { "aria-label": "Cast FID", autocomplete: "off", class: "bg-transparent px-3 py-2 text-sm leading-snug w-full text-xs rounded-t-md", name: "inputText", type: "text", required: true, pattern: "^[0-9]*$", placeholder: "FID", "x-model": "castFid" }), _jsx("input", { "aria-label": "Cast Hash", autocomplete: "off", class: "bg-transparent px-3 py-2 text-sm leading-snug w-full text-xs rounded-b-md", name: "inputText", type: "text", required: true, pattern: "^0x[a-fA-F0-9]{40}$", placeholder: "Hash", "x-model": "castHash" })] })] }), _jsxs("div", { class: "flex gap-1.5 mt-1.5", children: [_jsx("button", { class: "bg-background-100 border rounded-md w-full text-xs font-medium py-1.5", type: "button", "x-on:click": "close", children: "Cancel" }), _jsx("button", { class: "bg-gray-200 hover:bg-gray-100 rounded-md w-full text-xs text-bg font-medium py-1.5", type: "submit", children: "Update" })] })] })] })] })] }));
}
//# sourceMappingURL=Timeline.js.map