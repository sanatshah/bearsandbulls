import {} from 'hono';
import { produce } from 'immer';
import {} from '../types.js';
import { getIntentState } from './getIntentState.js';
import { parsePath } from './parsePath.js';
export async function getFrameContext(options) {
    const { context, req } = options;
    const { frameData, initialPath, previousButtonValues, verified } = context || {};
    const { buttonValue, inputText, redirect, reset } = getIntentState({
        buttonValues: previousButtonValues || [],
        frameData,
    });
    const status = (() => {
        if (redirect)
            return 'redirect';
        if (reset)
            return 'initial';
        return context.status || 'initial';
    })();
    // If the user has clicked a reset button, we want to set the URL back to the
    // initial URL.
    const url = (reset ? `${new URL(req.url).origin}${initialPath}` : undefined) ||
        parsePath(context.url);
    let previousState = (() => {
        if (context.status === 'initial')
            return options.initialState;
        return context?.previousState || options.initialState;
    })();
    function deriveState(derive) {
        if (status === 'response' && derive)
            previousState = produce(previousState, derive);
        return previousState;
    }
    return {
        buttonIndex: frameData?.buttonIndex,
        buttonValue,
        frameData,
        initialPath,
        inputText,
        deriveState,
        previousButtonValues,
        previousState: previousState,
        req,
        res: (data) => data,
        status,
        url,
        verified,
    };
}
//# sourceMappingURL=getFrameContext.js.map