type Env = Record<string, unknown> | Promise<Record<string, unknown>>;
type EnvFunc = () => Env | Promise<Env>;
type GetEnv<Options> = (options: Options) => EnvFunc;
interface ExecutionContext {
    waitUntil(promise: Promise<unknown>): void;
    passThroughOnException(): void;
}
type Fetch = (request: Request, env: {}, executionContext: ExecutionContext) => Promise<Response>;
interface Plugin {
    env?: EnvFunc;
    onServerClose?: () => void | Promise<void>;
}

export { Env, EnvFunc, ExecutionContext, Fetch, GetEnv, Plugin };
