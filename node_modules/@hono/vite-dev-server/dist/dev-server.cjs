"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dev_server_exports = {};
__export(dev_server_exports, {
  defaultOptions: () => defaultOptions,
  devServer: () => devServer
});
module.exports = __toCommonJS(dev_server_exports);
var import_node_server = require("@hono/node-server");
var import_minimatch = require("minimatch");
var import_cloudflare_pages = require("./cloudflare-pages/index.js");
const defaultOptions = {
  entry: "./src/index.ts",
  export: "default",
  injectClientScript: true,
  exclude: [
    /.*\.ts$/,
    /.*\.tsx$/,
    /^\/@.+$/,
    /^\/favicon\.ico$/,
    /^\/static\/.+/,
    /^\/node_modules\/.*/
  ],
  plugins: []
};
function devServer(options) {
  const entry = options?.entry ?? defaultOptions.entry;
  const plugin = {
    name: "@hono/vite-dev-server",
    configureServer: async (server) => {
      async function createMiddleware(server2) {
        return async function(req, res, next) {
          const exclude = options?.exclude ?? defaultOptions.exclude;
          for (const pattern of exclude) {
            if (req.url) {
              if (pattern instanceof RegExp) {
                if (pattern.test(req.url)) {
                  return next();
                }
              } else if ((0, import_minimatch.minimatch)(req.url?.toString(), pattern)) {
                return next();
              }
            }
          }
          let appModule;
          try {
            appModule = await server2.ssrLoadModule(entry);
          } catch (e) {
            return next(e);
          }
          const exportName = options?.export ?? defaultOptions.export;
          const app = appModule[exportName];
          if (!app) {
            return next(new Error(`Failed to find a named export "${exportName}" from ${entry}`));
          }
          (0, import_node_server.getRequestListener)(
            async (request) => {
              let env = {};
              if (options?.env) {
                if (typeof options.env === "function") {
                  env = await options.env();
                } else {
                  env = options.env;
                }
              } else if (options?.cf) {
                env = await (0, import_cloudflare_pages.getEnv)(options.cf)();
              }
              if (options?.plugins) {
                for (const plugin2 of options.plugins) {
                  if (plugin2.env) {
                    env = typeof plugin2.env === "function" ? await plugin2.env() : plugin2.env;
                  }
                }
              }
              const response = await app.fetch(request, env, {
                waitUntil: async (fn) => fn,
                passThroughOnException: () => {
                  throw new Error("`passThroughOnException` is not supported");
                }
              });
              if (!(response instanceof Response)) {
                throw response;
              }
              if (options?.injectClientScript !== false && response.headers.get("content-type")?.match(/^text\/html/)) {
                const script = '<script>import("/@vite/client")</script>';
                return injectStringToResponse(response, script);
              }
              return response;
            },
            {
              errorHandler: (e) => {
                let err;
                if (e instanceof Error) {
                  err = e;
                  server2.ssrFixStacktrace(err);
                } else if (typeof e === "string") {
                  err = new Error(`The response is not an instance of "Response", but: ${e}`);
                } else {
                  err = new Error(`Unknown error: ${e}`);
                }
                next(err);
              }
            }
          )(req, res);
        };
      }
      server.middlewares.use(await createMiddleware(server));
      server.httpServer?.on("close", async () => {
        if (options?.plugins) {
          for (const plugin2 of options.plugins) {
            if (plugin2.onServerClose) {
              await plugin2.onServerClose();
            }
          }
        }
      });
    }
  };
  return plugin;
}
function injectStringToResponse(response, content) {
  const stream = response.body;
  const newContent = new TextEncoder().encode(content);
  if (!stream) {
    return null;
  }
  const reader = stream.getReader();
  const newContentReader = new ReadableStream({
    start(controller) {
      controller.enqueue(newContent);
      controller.close();
    }
  }).getReader();
  const combinedStream = new ReadableStream({
    async start(controller) {
      for (; ; ) {
        const [existingResult, newContentResult] = await Promise.all([
          reader.read(),
          newContentReader.read()
        ]);
        if (existingResult.done && newContentResult.done) {
          controller.close();
          break;
        }
        if (!existingResult.done) {
          controller.enqueue(existingResult.value);
        }
        if (!newContentResult.done) {
          controller.enqueue(newContentResult.value);
        }
      }
    }
  });
  const headers = new Headers(response.headers);
  headers.delete("content-length");
  return new Response(combinedStream, {
    headers,
    status: response.status
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultOptions,
  devServer
});
