"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cloudflare_pages_exports = {};
__export(cloudflare_pages_exports, {
  default: () => cloudflare_pages_default,
  disposeMf: () => disposeMf,
  getEnv: () => getEnv
});
module.exports = __toCommonJS(cloudflare_pages_exports);
const nullScript = "export default { fetch: () => new Response(null, { status: 404 }) };";
let mf = void 0;
const getEnv = (options) => async () => {
  if (!mf) {
    const { Miniflare } = await import("miniflare");
    mf = new Miniflare({
      modules: true,
      script: nullScript,
      ...options
    });
  }
  const env = {
    ...await mf.getBindings(),
    // `env.ASSETS.fetch()` function for Cloudflare Pages.
    ASSETS: {
      async fetch(input, init) {
        try {
          return await fetch(new Request(input, init));
        } catch (e) {
          console.error("Failed to execute ASSETS.fetch: ", e);
          return new Response(null, { status: 500 });
        }
      }
    }
  };
  return env;
};
const disposeMf = async () => {
  mf?.dispose();
  mf = void 0;
};
const plugin = (options) => {
  const env = getEnv(options ?? {});
  return {
    env,
    onServerClose: async () => {
      await disposeMf();
    }
  };
};
var cloudflare_pages_default = plugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  disposeMf,
  getEnv
});
